(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    146764,       3152]
NotebookOptionsPosition[    145730,       3113]
NotebookOutlinePosition[    146067,       3128]
CellTagsIndexPosition[    146024,       3125]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"4", "B", "*", 
      RowBox[{"x", "^", "3"}]}], "+", 
     RowBox[{"3", "*", "k", "*", "B", "*", "x"}], "-", "A"}], "\[Equal]", 
    "0"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.639468183793047*^9, 3.639468227576206*^9}, {
  3.639468265018744*^9, 3.639468265437134*^9}, {3.639477164178789*^9, 
  3.639477170791039*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"B", " ", "k"}], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"A", " ", 
              SuperscriptBox["B", "2"]}], "+", 
             SqrtBox[
              RowBox[{
               RowBox[{
                SuperscriptBox["A", "2"], " ", 
                SuperscriptBox["B", "4"]}], "+", 
               RowBox[{
                SuperscriptBox["B", "6"], " ", 
                SuperscriptBox["k", "3"]}]}]]}], ")"}], 
           RowBox[{"1", "/", "3"}]]]}], "+", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"A", " ", 
             SuperscriptBox["B", "2"]}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{
               SuperscriptBox["A", "2"], " ", 
               SuperscriptBox["B", "4"]}], "+", 
              RowBox[{
               SuperscriptBox["B", "6"], " ", 
               SuperscriptBox["k", "3"]}]}]]}], ")"}], 
          RowBox[{"1", "/", "3"}]], "B"]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", "B", " ", "k"}], 
       RowBox[{"4", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"A", " ", 
            SuperscriptBox["B", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              SuperscriptBox["A", "2"], " ", 
              SuperscriptBox["B", "4"]}], "+", 
             RowBox[{
              SuperscriptBox["B", "6"], " ", 
              SuperscriptBox["k", "3"]}]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"A", " ", 
            SuperscriptBox["B", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              SuperscriptBox["A", "2"], " ", 
              SuperscriptBox["B", "4"]}], "+", 
             RowBox[{
              SuperscriptBox["B", "6"], " ", 
              SuperscriptBox["k", "3"]}]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}], 
       RowBox[{"4", " ", "B"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", "B", " ", "k"}], 
       RowBox[{"4", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"A", " ", 
            SuperscriptBox["B", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              SuperscriptBox["A", "2"], " ", 
              SuperscriptBox["B", "4"]}], "+", 
             RowBox[{
              SuperscriptBox["B", "6"], " ", 
              SuperscriptBox["k", "3"]}]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"A", " ", 
            SuperscriptBox["B", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              SuperscriptBox["A", "2"], " ", 
              SuperscriptBox["B", "4"]}], "+", 
             RowBox[{
              SuperscriptBox["B", "6"], " ", 
              SuperscriptBox["k", "3"]}]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}], 
       RowBox[{"4", " ", "B"}]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.639468261262006*^9, 3.6394682662185373`*^9}, 
   3.63947718444419*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "4"}], "+", 
    RowBox[{"3", 
     RowBox[{"x", "^", "2"}]}], "-", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.639468315012093*^9, 3.639468351586679*^9}, {
  3.639474816966111*^9, 3.639474828583815*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-0.08258781201904322, 29.99999632653079}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6394683523957644`*^9, {3.639474819409687*^9, 3.639474829327651*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6394683348385067`*^9, 3.639468337078326*^9}}],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"B", " ", "k"}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"A", " ", 
           SuperscriptBox["B", "2"]}], "+", 
          SqrtBox[
           RowBox[{
            RowBox[{
             SuperscriptBox["A", "2"], " ", 
             SuperscriptBox["B", "4"]}], "+", 
            RowBox[{
             SuperscriptBox["B", "6"], " ", 
             SuperscriptBox["k", "3"]}]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]]]}], "+", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"A", " ", 
          SuperscriptBox["B", "2"]}], "+", 
         SqrtBox[
          RowBox[{
           RowBox[{
            SuperscriptBox["A", "2"], " ", 
            SuperscriptBox["B", "4"]}], "+", 
           RowBox[{
            SuperscriptBox["B", "6"], " ", 
            SuperscriptBox["k", "3"]}]}]]}], ")"}], 
       RowBox[{"1", "/", "3"}]], "B"]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.639475671705488*^9, 3.6394756741417828`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"B", " ", "k"}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"A", " ", 
           SuperscriptBox["B", "2"]}], "+", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["B", "4"], " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["A", "2"], "+", 
              RowBox[{
               SuperscriptBox["B", "2"], " ", 
               SuperscriptBox["k", "3"]}]}], ")"}]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]]]}], "+", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"A", " ", 
          SuperscriptBox["B", "2"]}], "+", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["B", "4"], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["A", "2"], "+", 
             RowBox[{
              SuperscriptBox["B", "2"], " ", 
              SuperscriptBox["k", "3"]}]}], ")"}]}]]}], ")"}], 
       RowBox[{"1", "/", "3"}]], "B"]}], ")"}], "^", "3"}]}]], "Input",
 CellChangeTimes->{{3.6394825640742273`*^9, 3.6394825647356997`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"B", " ", "k"}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"A", " ", 
           SuperscriptBox["B", "2"]}], "+", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["B", "4"], " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["A", "2"], "+", 
              RowBox[{
               SuperscriptBox["B", "2"], " ", 
               SuperscriptBox["k", "3"]}]}], ")"}]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]]]}], "+", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"A", " ", 
          SuperscriptBox["B", "2"]}], "+", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["B", "4"], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["A", "2"], "+", 
             RowBox[{
              SuperscriptBox["B", "2"], " ", 
              SuperscriptBox["k", "3"]}]}], ")"}]}]]}], ")"}], 
       RowBox[{"1", "/", "3"}]], "B"]}], ")"}], "3"]}]], "Output",
 CellChangeTimes->{3.639482565475421*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "8"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", "^", "3"}], "/", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", "a"}]}], ")"}], "^", "3"}]}], ")"}]}], ",", "a"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6394805125467377`*^9, 3.6394805288701363`*^9}, {
  3.639480700893602*^9, 3.639480704230575*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"48", " ", 
    SuperscriptBox["a", "3"]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "a"}]}], ")"}], "4"]], "-", 
  FractionBox[
   RowBox[{"24", " ", 
    SuperscriptBox["a", "2"]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "a"}]}], ")"}], "3"]]}]], "Output",
 CellChangeTimes->{3.639480529232078*^9, 3.639480704854239*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"48", " ", 
     SuperscriptBox["a", "3"]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "a"}]}], ")"}], "4"]], "-", 
   FractionBox[
    RowBox[{"24", " ", 
     SuperscriptBox["a", "2"]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "a"}]}], ")"}], "3"]]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"24", " ", 
    SuperscriptBox["a", "2"]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "a"}]}], ")"}], "4"]]}]], "Output",
 CellChangeTimes->{3.639480738109249*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.639480514103056*^9, 3.639480515981145*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Simplify[(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Results", 1, 2, "Input", 
        "(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"simplify\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{"48", " ", 
                    SuperscriptBox["a", "3"]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "a"}]}], ")"}], "4"]], "-", 
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{"24", " ", 
                    SuperscriptBox["a", "2"]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "a"}]}], ")"}], "3"]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}], 
                    ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Simplification", "id" -> 
     "Result", "position" -> "100", "error" -> "false", "numsubpods" -> "3", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3"}], 
       XMLElement["moutput", {}, {"(-24 a^2)/(1 + 2 a)^4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", 
              FractionBox[
               RowBox[{"24", " ", 
                 SuperscriptBox["a", "2"]}], 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], ")"}], "4"]]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Apart[(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3]"}], 
       
       XMLElement[
       "moutput", {}, {"-6/(1 + 2 a)^4 + 12/(1 + 2 a)^3 - 6/(1 + 2 a)^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{
                   FractionBox["6", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], ")"}], "2"]]}]}], 
               "+", 
               FractionBox["12", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], ")"}], "3"]], "-", 
               FractionBox["6", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], ")"}], "4"]]}], 
             Identity], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Simplify the following\""}, "RowDefault"],
                     "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["24", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["3", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Put each term in \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["24", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["3", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\" over the common denominator \"", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], ")"}], 
                    "4"], "\": \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["24", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["3", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\" \[LongEqual] \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "24"}], " ", 
                    SuperscriptBox["a", "2"]}], "-", 
                    RowBox[{"48", " ", 
                    SuperscriptBox["a", "3"]}]}], HoldForm]}]}, "RowDefault"],
                     "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "+", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"48"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm], TraditionalForm],
                     DisplayForm], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Grouping like terms, \"", 
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"48"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"48"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"48"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["48", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"48"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["3", HoldForm]]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", "0"}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "24"}], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["a", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "a"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], 
                    TagBox["4", HoldForm]]], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Simplification", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-24 a^2)/(1 + 2 a)^4, {a, -0.5, 0.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3659$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3658$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1964294$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3658$\
1964295$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3659$1964296$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3659$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3658$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1964294$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3658$\
1964295$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3659$\
1964296$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964278[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(-24) $CellContext`a^2 (1 + 
                    2 $CellContext`a)^(-4), {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$], 
                    (
                    Piecewise[{{
                    0. + 0.5350570063086735 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.5350570063086735 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$], \
-0.5005], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$]], \

                    (Piecewise[{{
                    0. + 0.5350570063086735 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.5350570063086735 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$ + 
                    0.001001, 
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$]], 
                    0.5005]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Exclusions -> {$CellContext`a == Rational[-1, 2]}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3658$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3659$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1964278]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964278[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964278[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMtDHx8gEJ6GBMGlCS8r1efGksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96jQxml/\
V6vpy9b80Fyml7D00NrhnKWy0LQdye5Aq2ZFOklfHbTmhjMLnDyA6j3XbXmvVQzYvz5Fb5PeFJwYuC\
rYZwZBnqyp0iesUTXnpFiR/\
YnEy4TwtlPeLz18tnO9ovnHgZjGRFjQAn9tC1knimiIe0h0BVr3nIivvnjg/\
L4qeA8hu8FiAT0PesdK0ItjBSEYz7Bt15spm5jYoYIShQ9d5qcPIdtL9BGMTEdwyzHN84ma6stMFFT\
7bm5U3KzTkE+/Ov4QMYuJu9xSbuzIzAsjAtG32lZ/XPuBnh+3RZeyePVxGF+\
bzjyRgw7Ar1M55PWdfKMVF3rop9zdV7zZaNBnj1l6v+\
lA6bNchjbbcOA2aGt8WrtLcPvtIWXOXb9XNx3rfnsHSXgquFQCe6jpAWfR9FMeeAl2j5dnVuHx7hV8\
R2jM6SCFU5k4yz7xfXH/Qq83hRirN1kA9IR9QyIIAfroo7bXTZlZpgRRRILPL+\
uXzbZWNahBNzZvvZMUGYHmCdk3fKEZj9dqDsxSfblj4pbyeVUkyHv+8LAFNRa0d/A+\
ihLrqBjGRhJjBc09RrMYZXUiKhg2Q9KkDgngiEk+2U/7pt/uFgJpGpPobqUZ3HgSnMSnkS/\
LPABiKnJmjt24OgKblvMJpLHteoilqaL02ZzTPebTDduaA70UBJCSxI+0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JriI8V/pN6c/uMY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-24 a^2)/(1 + 2 a)^4, {a, -2.5, 2.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3661$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3660$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1964369$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3660$\
1964370$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3661$1964371$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3661$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3660$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1964369$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3660$\
1964370$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3661$\
1964371$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964353[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(-24) $CellContext`a^2 (1 + 
                    2 $CellContext`a)^(-4), {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$], 
                    (
                    Piecewise[{{
                    0. + 2.675285031543367 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.675285031543367 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$], \
-2.5024999999999995`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$]], \

                    (Piecewise[{{
                    0. + 2.675285031543367 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 2.675285031543367 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$ + 
                    0.005004999999999999, 
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$]], 
                    2.5024999999999995`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Exclusions -> {$CellContext`a == Rational[-1, 2]}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3660$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3661$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 
                    All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1964353]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964353[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1964353[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMtBdN4gMS0MGYNKAk5Xu9+\
JJauHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d71nxzJK+71eT1+\
35oPkNL2Fp6fWDOUsl4Wg785yBVozKdJr+\
OyuNTGYfeDkB1Dvu2nNe6lmxPjzK3yf8KTgxMBXwzgzDPTkQJF8yhJde0aKndifTLhMCGc/\
4fnWy73dnb1tD4OxjIgxoITeaQuZTxXRkPYQ6IY1bzkR3/zxSXn8VHAew/\
cCRAL6kfWOFaEWRgrCMZ/gW682U/\
cxMUMEJYpeOk1OnsO2F2ijmMjGMMvxjYvJ2moLTFSmPTcPSm7WKciHfxsfyNjF5D0uaXd2BIaFccXo\
Oy+rf87dAM+v28IrebqaOMzvDUfeiGEnoJfpfNG6Tp6Rqmtd9HOuLmu+bDTIi6dM/\
b90xLRZDmO7bRgwO7Y1Xq29ZfjdtvAyx66fi/uhNZ+9owRcNRwqwX2UtODzKJopD7xE26erc+\
vwGPcqvmN0hlSwwolsnGW/\
uP54XIHXm0KMtZtsQDqingER5GBd1HG7zzJmhlOiSGKB59f1yyYbyzqUgDvb154JyuwA84SsW57QHK\
YLdScmmX75o+JWcjnXZMj7oTCQgVor+jtYH2XJFXQsAyOJ8YKmXoM5rJIaERUs+0EJEudEMIRkv+\
zHffMPFyuBVB0oVJfyLA5cac7Ck+\
iXBT4CkZlpc8cOHF3BbYvZRPK0Vl3E0nRx2myO6X6T6cYNzYEeSkJoScIHercpdJvCX90Ulvbgbk3o\
1oRuTejWhG5N+H/XBBcx/iv9BsyAuJY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Simplify", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.57", 
    "parsetiming" -> "0.846", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa13521gcb01f30b05013a00005f34hg9328g4c1ha", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "7", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa13531gcb01f30b05013a0000651fg5e9fiche0e4&s=7", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2015, 5, 1, 17, 10, 30.32325`8.234350727456658}, "Line" -> 16, 
    "SessionID" -> 32480619510490394749}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Results", 1, 2, "Input", 
    "(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Simplify[(48 a^3)/(1 + 2 a)^4 - (24 a^2)/(1 + 2 a)^3]"}, 
   
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {1956., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"48", " ", 
    SuperscriptBox["a", "3"]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "a"}]}], ")"}], "4"]], "-", 
  FractionBox[
   RowBox[{"24", " ", 
    SuperscriptBox["a", "2"]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "a"}]}], ")"}], "3"]]}]], "Output",
 CellChangeTimes->{3.639481830333104*^9}]
}, Open  ]]
},
WindowSize->{960, 1016},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"10.0 for Linux x86 (64-bit) (September 9, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 420, 11, 32, "Input"],
Cell[1003, 35, 4205, 132, 331, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5245, 172, 380, 11, 32, "Input"],
Cell[5628, 185, 7367, 131, 243, "Output"]
}, Open  ]],
Cell[13010, 319, 94, 1, 32, "Input"],
Cell[13107, 322, 1185, 38, 113, "Input"],
Cell[CellGroupData[{
Cell[14317, 364, 1253, 40, 97, InheritFromParent],
Cell[15573, 406, 1227, 40, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16837, 451, 425, 14, 32, "Input"],
Cell[17265, 467, 464, 16, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17766, 488, 469, 17, 64, "Input"],
Cell[18238, 507, 262, 9, 57, "Output"]
}, Open  ]],
Cell[18515, 519, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[18632, 524, 126637, 2568, 1994, "WolframAlphaShortInput"],
Cell[145272, 3094, 442, 16, 90, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

